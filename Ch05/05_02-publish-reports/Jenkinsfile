pipeline {
    agent any

    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '10'))
        timeout(time: 12, unit: 'HOURS')
        timestamps()
    }

    stages {
        stage('Requirements') {
            steps {
                dir("${env.WORKSPACE}/Ch05/05_02-publish-reports") {
                    bat 'C:\\Users\\melghoul\\AppData\\Local\\Programs\\Python\\Python313\\python.exe -m venv venv'
                    bat 'venv\\Scripts\\pip install --upgrade --requirement requirements.txt'  // Use Windows path separator
                }
            }
        }
        stage('Lint') {
            steps {
                dir("${env.WORKSPACE}/Ch05/05_02-publish-reports") {
                    bat '''
            for %%f in (*.py) do (
                venv\\Scripts\\flake8 --ignore=E501,E231 %%f
            )
            '''

            bat '''
            for %%f in (*.py) do (
            venv\\Scripts\\pylint --errors-only --disable=C0301 --disable=C0326 %%f
            )
            '''

                    
                }
            }
        }
        stage('Test') {
            steps {
                dir("${env.WORKSPACE}/Ch05/05_02-publish-reports") {
                    bat '''
                    for %%f in (test_*.py) do (
                    venv\\Scripts\\coverage run -m pytest --junitxml=pytest_junit.xml -v %%f
                    )
                    '''
                }
            }
        }
        stage('Build') {
            steps {
                echo "Build the application in this step..."
            }
        }
        stage('Deploy') {
            steps {
                echo "Deploy the application in this step..."
            }
        }
    }

    post {
        always {
            dir("${env.WORKSPACE}/Ch05/05_02-publish-reports") {
                bat 'venv\\Scripts\\coverage xml'  // Use Windows path separator
            }

            junit allowEmptyResults: true, testResults: '**/pytest_junit.xml'

            junit allowEmptyResults: true, testResults: '**/pylint_junit.xml'

            publishCoverage adapters: [cobertura('**/coverage.xml')],
                sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
        }
    }
}
